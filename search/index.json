[{"content":"Java 起源 1990 年代初，Sun 公司预计嵌入式系统会在家电领域出色，成立由詹姆斯·高斯林主导的“Green 计划”，目标设置在家用电器等小型系统的编程语言，应用在电视机、电话、闹钟、烤面包机等家用电器的通用控制和通信\n1992 年夏天，Green 计划实现了 Green 操作系统，Oak 程序设计语言等，同年 11 月，Green 计划被转化为 Sun 公司的一个全资子公司“FirstPerson 有限公司”\n1994 年夏天，由于互联网兴起，詹姆斯·高斯林对 Oak 进行改造，同年秋，完成了第一个 Java 语言的网页浏览器：WebRunner,Sun 公司给予高度评价，由于 Oak 商标已被注册，改名为 Java\n1995 年初，正式发布\n1996 年初，Sun 发布 JDK1.0 包括运行环境（JRE1)，开发环境（JDK2）\n1997 年 2 月 18 日，Sun 发布 JDK1.1,增加 JIT(即时编译3)编译器\n1998 年 12 月，Sun 发布 JDK1.2、JSP/Servlet、EJB 等规范，将 Java 分为 J2EE4、J2SE5、J2ME6，并将 API 分为核心 API，可选 API，特殊 API\n2002 年 2 月，Sun 发布 JDK1.4,可以实现大多数应用\n2004 年 10 月，Sun 发布 JDK1.5，改名为 Java SE5.0,增加泛型，增强型 for 循环语句等功能\n2009 年，Sun 公司被 Oracle 收购\n详情\n  JVM+核心类库（解释 class 文件）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n JRE+编译工具（javac 等命令）\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 传统编译器编译一条指令运行结束会将其销毁，JIT 编译器会将常用的指令保存在内存中，下次调用不需要再次编译\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 主要控制移动设备和信息家电优先存储的设备\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Java 技术的核心和基础\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n Java 应用最广泛的地方\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/1.%E8%B5%B7%E6%BA%90/","title":"1.起源"},{"content":"高级语言程序设计执行方式 编译型 通过专门的编译器针对特定的操作系统先一次性将高级语言源代码解释转成**平台硬件执行的机器码（机器指令1和操作数2），并包装成该平台所能识别的可执行程序**格式，之后直接运行可执行文件，转换过程称为：编译，编译生成的可执行文件可以脱离开发环境执行，运行效率高，但移植性较差，需要将源代码复制到另一个平台通过该平台特定的编译器重新编译\n解释型 通过专门的解释器对源代码进行解释成特定平台的机器码并立即执行，相当与编译和运行同时进行，也等同于每次执行程序都需要编译，运行效率低，移植性较强，只需提供特定平台的解释器，\nJava 运行机制与 JVM 运行机制 Java 编写的程序\n 编译器生成字节码（*class 文件） 由特定平台的解释器解释运行字节码文件  JVM Java 虚拟机，运行 Java 字节码文件\n_ 重点_\n编译器面向 JVM，不同平台具备不同的 JVM,但编译器提供相同的接口连接不同平台平台的 JVM 来运行字节码文件\n  机器语言是用二进制代码表示的、计算机能直接识别和执行的一种机器指令的集合\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 操作数（operand)，是 计算机指令中的一个组成部分，它规定了指令中进行数字运算的量\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/2.%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/","title":"2.运行机制"},{"content":"命令 编译命令：java\n运行命令：javac\n在使用这两个命令之前，需要配置环境变量（一系列路径），使得操作系统通过环境变量查找到命令从而执行\nMac 配置环境变量\n用法 Javac 命令用法： 1  javac -d destdir srcFile   -d destdir:字节码存放路径(可省)\nsrcFile：源文件所在位置\n1  javac -d . Hello.java   .表示当前路径\n注意\n编译后每个类都会生成对应的 class 文件，因为编译生成字节码文件默认以类名为文件名，一个源文件有多个类，则会产生多个字节码文件\njava 命令用法 1  java 类名   ","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/3.%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/","title":"3.配置环境变量"},{"content":"面向对象程序设计 采用面向对象设计，最小程序单元是类，可以生成系统中多个对象，\n类 （狗）\n代表客观世界中具有某种特征的一类事物，面向对象使用类来封装一类事物的内部状态数据（属性）（name），类会提供操作属性的方法,为这类事物的行为特征(run)提供相应的实现\n 属性+方法 = 类\n 对象 （哈士奇）\n类的具体实例\n基本特征 封装 将对象的实现细节隐藏，暴露公用方法来实现该对象功能\n继承 子类继承父类，获得父类的属性和方法多态 子类对象可以直接赋给父类变量，运行时表现出子类的行为特征，即同一个类型对象（父类）在执行同一个方法会有多种行为特征（子类 or 父类）\n功能  对象基本特点：标识唯一、分类性、多态性、封装、模块 类是具有共同属性、方法的一类事物，类是对象的抽象，通过封装，高内聚，低耦合  关于高内聚与低耦合\n 对象之间相互合作的机制称为“消息”，实例之间互相通信的机制 类之间共享属性和操作的机制成为继承，继承有传递性（属性和方法），单继承（一个直接父级）+多继承（多个直接父级）  ","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/4.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/","title":"4.面向对象程序设计"},{"content":"单行注释：//\n多行注释：/* */\n文档注释：/** */\n注意： 文档注释可以被 JDK 提供的工具 javadoc 解析生成 HTML 的说明文档，通常说明了每个类，每个方法的功能及用法\n详见 P44\n","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/5.%E6%B3%A8%E9%87%8A/","title":"5.注释"},{"content":" 变量是程序的基本组成单位\n Java 的变量规范  所有变量必须先声明后使用 相同类型的变量之间允许赋值  声明方式 1 2 3 4  type varName = 初始值 int x = 100;   类型 基本数据和引用数据\n引用数据类型\n对一个对象的引用（指针）\n基本数据类型  整数类型：byte，short，int，long(存放整数值) 浮点数类型：float，double（存放小数） 字符类型：char（表示单个字符） 布尔类型：boolean  字节数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  ┌───┐ byte │ │ └───┘ ┌───┬───┐ short │ │ │ └───┴───┘ ┌───┬───┬───┬───┐ int │ │ │ │ │ └───┴───┴───┴───┘ ┌───┬───┬───┬───┬───┬───┬───┬───┐ long │ │ │ │ │ │ │ │ │ └───┴───┴───┴───┴───┴───┴───┴───┘ ┌───┬───┬───┬───┐ float │ │ │ │ │ └───┴───┴───┴───┘ ┌───┬───┬───┬───┬───┬───┬───┬───┐ double │ │ │ │ │ │ │ │ │ └───┴───┴───┴───┴───┴───┴───┴───┘ ┌───┬───┐ char │ │ │ └───┴───┘   表示范围 整型（最高位的 bit 表示符号位（0 表示正数，1 表示负数）\n浮点型（最高位符号位，接下来 8/11 位表示指数，接下来 23/52 位表示尾数）\n使用细节  数据类型所占字节数不受操作系统发生改变 整型常量默认为 int，不足在后加 L 1 字节 8 位 浮点数=符号位+指数位+尾数位，尾数部分可能丢失，造成精度损失(小数都是近似值）详情 转义字符 详情,char 输出转义字符会表示转义 char 的本质是整数，对应 Unicode 码字符 字符型表现形式：单个字符+转义字符+Unicode 值 char 存储：a=\u0026gt;97=\u0026gt;二进制=\u0026gt;存储 char 输出：二进制=\u0026gt;97=\u0026gt;a=\u0026gt;显示 规定浮点数二进制表示= 1.XXX x 2N，有效数字 223=8388608（7 位数） 小数默认以 double 存放，若想让编译器理解成 float 在之后 f 单精度够用就不要用双精度，浪费空间  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  //字符型 public class Basic { public static void main(String[] args) { char word = 97; System.out.println(word); /* 输出为a,本质为整数，在内存中存储为整数 输出所给整数对应的Unicode编码字符 */ int word3 = \u0026#39;a\u0026#39;; System.out.println(word3);//输出为97  char word1 = \u0026#39;\\r\u0026#39;; System.out.println(word1);//输出为回车  char word2 = \u0026#39;a\u0026#39;; System.out.println(word2);//输出为a  } }   浮点数细节 进制转换 对照表格 原理 简单方法 精度损失 科学计数法 IEEE754 浮点数的限制 最高位为符号位（+，-）\n小数位存放省去整数位的 1 的有效二进制位\n指数位偏移 127（+127/1023）来表示\n基本数据类型赋值机制 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  public class Main { public static void main(String[] args) { int n = 100; // 定义变量n，同时赋值为100  System.out.println(\u0026#34;n = \u0026#34; + n); // 打印n的值  n = 200; // 变量n赋值为200  System.out.println(\u0026#34;n = \u0026#34; + n); // 打印n的值  int x = n; // 变量x赋值为n（n的值为200，因此赋值后x的值也是200）  System.out.println(\u0026#34;x = \u0026#34; + x); // 打印x的值  x = x + 100; // 变量x赋值为x+100（x的值为200，因此赋值后x的值是200+100=300）  System.out.println(\u0026#34;x = \u0026#34; + x); // 打印x的值  System.out.println(\u0026#34;n = \u0026#34; + n); // 再次打印n的值，n应该是200还是300？  } }   代码执行流程：\nint n = 100;:定义了变量n赋值为100，JVM 在内存中为变量n分配一个“存储单元”，填入值100：\n1 2 3 4 5 6  n │ ▼ ┌───┬───┬───┬───┬───┬───┬───┐ │ │100│ │ │ │ │ │ └───┴───┴───┴───┴───┴───┴───┘   n = 200;：JVM 把200写入变量n的存储单元，原有的值被覆盖，n的值为200`：\n1 2 3 4 5 6  n │ ▼ ┌───┬───┬───┬───┬───┬───┬───┐ │ │200│ │ │ │ │ │ └───┴───┴───┴───┴───┴───┴───┘   int x = n;：定义新变量x，同时对x赋值，JVM 需要新分配一个存储单元给变量x，并写入和变量n一样的值，变量x的值为200：\n1 2 3 4 5 6  n x │ │ ▼ ▼ ┌───┬───┬───┬───┬───┬───┬───┐ │ │200│ │ │200│ │ │ └───┴───┴───┴───┴───┴───┴───┘   x = x + 100;：JVM 首先计算等式右边的值x + 100，结果为300（x为200），将结果300写入x的存储单元，因此，变量x最终的值变为300：\n1 2 3 4 5 6  n x │ │ ▼ ▼ ┌───┬───┬───┬───┬───┬───┬───┐ │ │200│ │ │300│ │ │ └───┴───┴───┴───┴───┴───┴───┘   变量可以反复赋值，等号=是赋值语句\n基本数据类型的转换 自动类型转换 箭头左边的数值类型可以自动类型转换为箭头右边的数值类型\n强制类型转换 1  (targettype)value   使用细节 ","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/6.%E5%8F%98%E9%87%8F%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","title":"6.变量与数据类型"},{"content":"斜体和粗体 代码 1 2 3 4  1.*斜体*或_斜体_ 2.**粗体** 3.***加粗斜体*** 4.~~删除线~~   样式： 斜体\n粗体\n加粗粗体\n删除线\n分级标题 代码 第一种写法 1 2 3 4  这是一个一级标题 ============================ 这是一个二级标题 --------------------------------------------------   第二种写法 1 2 3 4 5 6  # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题   超链接 行内式 语法说明： [ ]里写链接文字，( )里写链接地址, ( )中的”“中可以为链接指定 title 属性，title 属性可加可不加。title 属性的效果是鼠标悬停在链接上会出现指定的 title 文字。[链接文字](链接地址 “链接标题”)’这样的形式。链接地址与链接标题前有一个空格\n代码 1 2  欢迎来到[梵居闹市](http://blog.leanote.com/freewalk) 欢迎来到[梵居闹市](http://blog.leanote.com/freewalk \u0026#34;梵居闹市\u0026#34;)   样式 梵居闹市\n参考式 参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理\n语法说明： 参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。\n如果链接文字本身可以做为链接标记，你也可以写成[链接文字][] [链接文字]：链接地址的形式，见代码的最后一行。\n代码 1 2 3 4 5 6  我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3] [Leanote 笔记][2]是一个不错的[网站][]。 [1]:http://www.google.com \u0026#34;Google\u0026#34; [2]:http://www.leanote.com \u0026#34;Leanote\u0026#34; [3]:http://http://blog.leanote.com/freewalk \u0026#34;梵居闹市\u0026#34; [网站]:http://http://blog.leanote.com/freewalk   样式 我经常去的几个网站[Google][1]、[Leanote][2]以及[自己的博客][3] [Leanote 笔记][2]是一个不错的[网站][]。 [1]:http://www.google.com \u0026ldquo;Google\u0026rdquo; [2]:http://www.leanote.com \u0026ldquo;Leanote\u0026rdquo; [3]:http://http://blog.leanote.com/freewalk \u0026ldquo;梵居闹市\u0026rdquo; [网站]:http://http://blog.leanote.com/freewalk\n自动链接 语法说明： Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用\u0026lt;\u0026gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：\n1 2  \u0026lt;http://example.com/\u0026gt; \u0026lt;address@example.com\u0026gt;   样式 http://example.com/ address@example.com\n锚点 网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。\n语法描述 在你准备跳转到的指定标题后插入锚点{#标记}，然后在文档的其它地方写上连接到锚点的链接。\n代码 1 2 3  ## 0. 目录{#index} 跳转到[目录](#index){#index}   跳转到自动链接\n列表 无序列表 语法描述 使用 *，+，- 表示无序列表。\n代码 1 2 3  - 无序列表项 一 - 无序列表项 二 - 无序列表项 三   样式  - 无序列表项 一 - 无序列表项 二 - 无序列表项 三  有序列表 语法描述 有序列表则使用数字接着一个英文句点。\n代码 1 2 3  1. 有序列表项 一 2. 有序列表项 二 3. 有序列表项 三   样式  1. 有序列表项 一 2. 有序列表项 二 3. 有序列表项 三  定义型列表？ 语法说明： 定义型列表由名词和解释组成。一行写上定义，紧跟一行写上解释。解释的写法:紧跟一个缩进(Tab)\n代码： 1 2 3 4 5 6 7 8  Markdown : 轻量级文本标记语言，可以转换成html，pdf等格式（左侧有一个可见的冒号和四个不可见的空格） 代码块 2 : 这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格） 代码块（左侧有八个不可见的空格）   列表缩进 语法说明： 列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。*+tab\n要让列表看起来更漂亮，你可以把内容用固定的缩进整理好（显示效果与代码一致）：\n  轻轻的我走了， 正如我轻轻的来； 我轻轻的招手， 作别西天的云彩。 那河畔的金柳， 是夕阳中的新娘； 波光里的艳影， 在我的心头荡漾。 软泥上的青荇， 油油的在水底招摇； 在康河的柔波里， 我甘心做一条水草！\n  那榆荫下的一潭， 不是清泉， 是天上虹； 揉碎在浮藻间， 沉淀着彩虹似的梦。 寻梦？撑一支长篙， 向青草更青处漫溯； 满载一船星辉， 在星辉斑斓里放歌。 但我不能放歌， 悄悄是别离的笙箫； 夏虫也为我沉默， 沉默是今晚的康桥！ 悄悄的我走了， 正如我悄悄的来； 我挥一挥衣袖， 不带走一片云彩。\n  包含引用的列表 语法说明： 如果要在列表项目内放进引用，那 \u0026gt; 就需要缩进：\n代码 1 2 3  * 阅读的方法: \u0026gt; 打开书本。 \u0026gt; 打开电灯。   样式   阅读的方法\n 打开书本\n打开电灯\n   包含代码区块的引用？ 语法说明 如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：\n特殊情况 在特殊情况下，项目列表很可能会不小心产生，像是下面这样的写法：\n1 2  1986. What a great season. 显示What a great season.   换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠：\n1  1986\\. What a great season.   引用 语法说明： 引用需要在被引用的文本前加上\u0026gt;符号。\n代码： 1 2 3 4 5 6  \u0026gt; 这是一个有两段文字的引用, \u0026gt; 无意义的占行文字1. \u0026gt; 无意义的占行文字2. \u0026gt; \u0026gt; 无意义的占行文字3. \u0026gt; 无意义的占行文字4.   样式  这是一个有两段文字的引用, 无意义的占行文字 1. 无意义的占行文字 2.\n无意义的占行文字 3. 无意义的占行文字 4.\n Markdown 也允许你偷懒只在整个段落的第一行最前面加上 \u0026gt; ：\n引用的多层嵌套 区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 \u0026gt; ：\n代码 1 2 3  \u0026gt;\u0026gt;\u0026gt; 请问 Markdwon 怎么用？ - 小白 \u0026gt;\u0026gt; 自己看教程！ - 愤青 \u0026gt; 教程在哪？ - 小白      请问 Markdwon 怎么用？ - 小白\n  自己看教程！ - 愤青\n 教程在哪？ - 小白\n      引用其它要素 引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：\n代码 1 2 3 4 5 6 7  \u0026gt; 1. 这是第一行列表项。 \u0026gt; 2. 这是第二行列表项。 \u0026gt; \u0026gt; 给出一些例子代码： \u0026gt; \u0026gt; return shell_exec(\u0026#34;echo $input | $markdown_script\u0026#34;);     这是第一行列表项。 这是第二行列表项。  给出一些例子代码：\nreturn shell_exec(\u0026quot;echo $input | $markdown_script\u0026quot;);   插入图像 图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。\n语法中图片 Alt 的意思是如果图片因为某些原因不能显示，就用定义的图片 Alt 文字来代替图片。 图片 Title 则和链接中的 Title 一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。\n行内式 语法说明 1  ![图片Alt](图片地址 “图片Title”)   样式 ![图片Alt](图片地址 “图片 Title”)\n参考式 语法说明 1 2 3  在文档要插入图片的地方写![图片Alt][标记] 在文档的最后写上[标记]:图片地址 “Title”   代码 1 2 3 4  美丽花儿： ![美丽花儿][flower] [flower]:http://ww2.sinaimg.cn/large/56d258bdjw1eugeubg8ujj21kw16odn6.jpg \u0026#34;美丽花儿\u0026#34;   美丽花儿： 目录 在段落中填写 [TOC] 以显示全文内容的目录结构。\n注脚 语法说明： 1 2 3 4 5  语法说明： 在需要添加注脚的文字后加上脚注名字[^注脚名字],称为加注。 然后在文本的任意位置(一般在最后)添加脚注，脚注前必须有对应的脚注名字。 注意：经测试注脚与注脚之间必须空一行，不然会失效。成功后会发现，即使你没有把注脚写在文末，经Markdown转换后，也会自动归类到文章的最后。   代码 1 2 3 4  使用 Markdown[^1]可以效率的书写文档, 直接转换成 HTML[^2], 你可以使用 Leanote[^Le] 编辑器进行书写。 [^1]:Markdown是一种纯文本标记语言 [^2]:HyperText Markup Language 超文本标记语言 [^Le]:开源笔记平台，支持Markdown和笔记直接发为博文   样式 使用 Markdown1可以效率的书写文档, 直接转换成 HTML2, 你可以使用 Leanote3 编辑器进行书写。\nLaTeX 公式? $表示行内公式 代码 1  质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。   样式 质能守恒方程可以用一个很简洁的方程式 $E=mc^2$ 来表达。\n$$ 表示整行公式 代码 1 2 3 4  $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k}$$   样式 $$\\sum_{i=1}^n a_i=0$$ $$f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 $$ $$\\sum^{j-1}{k=0}{\\widehat{\\gamma}{kj} z_k}$$\n详情\n流程图 代码 1 2 3 4 5 6 7 8 9 10  flow st=\u0026gt;start: Start:\u0026gt;https://www.zybuluo.com io=\u0026gt;inputoutput: verification op=\u0026gt;operation: Your Operation cond=\u0026gt;condition: Yes or No? sub=\u0026gt;subroutine: Your Subroutine e=\u0026gt;end st-\u0026gt;io-\u0026gt;op-\u0026gt;cond cond(yes)-\u0026gt;e cond(no)-\u0026gt;sub-\u0026gt;io   详情\n表格 语法说明：  不管是哪种方式，第一行为表头，第二行分隔表头和主体部分，第三行开始每一行为一个表格行。 列于列之间用管道符|隔开。原生方式的表格每一行的两边也要有管道符。 第二行还可以为不同的列指定对齐方向。默认为左对齐，在-右边加上:就右对齐。  代码： 简单方式写表格：\n1 2 3 4 5  学号|姓名|分数 -|-|- 小明|男|75 小红|女|79 小陆|男|92   原生方式写表格：\n1 2 3 4 5  |学号|姓名|分数| |-|-|-| |小明|男|75| |小红|女|79| |小陆|男|92|   为表格第二列指定方向：\n1 2 3 4  产品|价格 -|-: Leanote 高级账号|60元/年 Leanote 超级账号|120元/年      学号 姓名 分数     小明 男 75   小红 女 79   小陆 男 92       学号 姓名 分数     小明 男 75   小红 女 79   小陆 男 92       产品 价格     Leanote 高级账号 60 元/年   Leanote 超级账号 120 元/年    分割线 你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线\n代码： 1 2 3 4 5  * * * *** ***** - - - ---------------------------------------   样式      代码 对于程序员来说这个功能是必不可少的，插入程序代码的方式有两种，一种是利用缩进(Tab), 另一种是利用”`”符号（一般在 ESC 键下方）包裹代码。\n语法说明：\n插入行内代码，即插入一个单词或者一句代码的情况，使用code这样的形式插入。 插入多行代码，可以使用缩进或者“ code “,具体看示例。 注意： 缩进式插入前方必须有空行\n行内式 代码 1  C语言里的函数 `scanf()` 怎么使用？   C 语言里的函数 scanf() 怎么使用？\n缩进式多行代码 缩进 4 个空格或是 1 个制表符\n一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。\n代码： 1 2 3 4 5  #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello world\\n\u0026#34;); }   用六个`包裹多行代码 代码： 1 2 3 4 5 6 7  ``` #include \u0026lt;stdio.h\u0026gt; int main(void) { printf(\u0026#34;Hello world\\n\u0026#34;); } 、、、   HTML 原始码 在代码区块里面， \u0026amp; 、 \u0026lt; 和 \u0026gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，剩下的 Markdown 都会帮你处理，例如：\n代码： 第一个例子：\n1 2 3  \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; © 2004 Foo Corporation \u0026lt;/div\u0026gt;   第二个例子：\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;table\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;th rowspan=\u0026#34;2\u0026#34;\u0026gt;值班人员\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;星期一\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;星期二\u0026lt;/th\u0026gt; \u0026lt;th\u0026gt;星期三\u0026lt;/th\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;李强\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;张明\u0026lt;/td\u0026gt; \u0026lt;td\u0026gt;王平\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt;     Markdown 是一种纯文本标记语言\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n HyperText Markup Language 超文本标记语言\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n 开源笔记平台，支持 Markdown 和笔记直接发为博文\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","date":"2022-05-14T00:00:00Z","permalink":"https://example.com/2022/markdown/","title":"Markdown"}]